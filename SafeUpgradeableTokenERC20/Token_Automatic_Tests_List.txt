  Contract: ERC20
    total supply
      √ returns the total amount of tokens
    balanceOf
      when the requested account has no tokens
        √ returns zero
      when the requested account has some tokens
        √ returns the total amount of tokens
    transfer
      when the recipient is not the zero address
        when the sender does not have enough balance
          √ reverts (71ms)
        when the sender transfers all balance
          √ transfers the requested amount (113ms)
          √ emits a transfer event (47ms)
        when the sender transfers zero tokens
          √ transfers the requested amount (88ms)
          √ emits a transfer event (44ms)
      when the recipient is the zero address
        √ reverts (45ms)
    transfer from
      when the token owner is not the zero address
        when the recipient is not the zero address
          when the spender has enough approved balance
            when the token owner has enough balance
              √ transfers the requested amount (99ms)
              √ decreases the spender allowance (140ms)
              √ emits a transfer event (63ms)
              √ emits an approval event (81ms)
            when the token owner does not have enough balance
              √ reverts (62ms)
          when the spender has MAX_UINT approved balance
            when the token owner has enough balance
              √ transfers the requested amount (77ms)
              √ spender allowance is not decreased (105ms)
              √ emits a transfer event (60ms)
              √ does not emit an approval event (73ms)
            when the token owner does not have enough balance
              √ reverts (54ms)
          when the spender does not have enough approved balance
            when the token owner has enough balance
              √ reverts (58ms)
            when the token owner does not have enough balance
              √ reverts (50ms)
        when the recipient is the zero address
          √ reverts (48ms)
      when the token owner is the zero address
        √ reverts (51ms)
    approve
      when the spender is not the zero address
        when the sender has enough balance
          √ emits an approval event (39ms)
          when there was no approved amount before
            √ approves the requested amount (61ms)
          when the spender had an approved amount
            √ reverts (46ms)
        when the sender does not have enough balance
          √ emits an approval event (40ms)
          when there was no approved amount before
            √ approves the requested amount (64ms)
          when the spender had an approved amount
            √ reverts (45ms)
      when the spender is the zero address
        √ reverts (49ms)
    decrease allowance
      when the spender is not the zero address
        when the sender has enough balance
          when there was no approved amount before
            √ reverts (44ms)
          when the spender had an approved amount
            √ emits an approval event (38ms)
            √ decreases the spender allowance subtracting the requested amount (326ms)
            √ sets the allowance to zero when all allowance is removed (61ms)
            √ sets the allowance to zero when more than the full allowance is removed (57ms)
        when the sender does not have enough balance
          when there was no approved amount before
            √ reverts (47ms)
          when the spender had an approved amount
            √ emits an approval event (39ms)
            √ decreases the spender allowance subtracting the requested amount (60ms)
            √ sets the allowance to zero when all allowance is removed (58ms)
            √ sets the allowance to zero when more than the full allowance is removed (63ms)
      when the spender is the zero address
        √ reverts (54ms)
    increase allowance
      when the spender is not the zero address
        when the sender has enough balance
          √ emits an approval event (40ms)
          when there was no approved amount before
            √ approves the requested amount (62ms)
          when the spender had an approved amount
            √ increases the spender allowance adding the requested amount (58ms)
        when the sender does not have enough balance
          √ emits an approval event (39ms)
          when there was no approved amount before
            √ approves the requested amount (59ms)
          when the spender had an approved amount
            √ increases the spender allowance adding the requested amount (78ms)
      when the spender is the zero address
        √ reverts (46ms)
    _mint
      √ rejects a null account (43ms)
      √ rejects minting zero value (43ms)
      for a non zero account
        √ increments totalSupply
        √ increments recipient balance
        √ emits Transfer event
    _burn
      √ rejects a null account (44ms)
      for a non zero account
        √ rejects burning more than balance (46ms)
        for entire balance
          √ decrements totalSupply
          √ decrements initialHolder balance
          √ emits Transfer event
        for less amount than balance
          √ decrements totalSupply
          √ decrements initialHolder balance
          √ emits Transfer event
    _burnFrom
      √ rejects a null account (43ms)
      for a non zero account
        √ rejects burning more than allowance (57ms)
        √ rejects burning more than balance (44ms)
        for entire allowance
          √ decrements totalSupply
          √ decrements initialHolder balance
          √ decrements spender allowance
          √ emits a Transfer event
          √ emits an Approval event
        for less amount than allowance
          √ decrements totalSupply
          √ decrements initialHolder balance
          √ decrements spender allowance
          √ emits a Transfer event
          √ emits an Approval event
    _transfer
      when the recipient is not the zero address
        when the sender does not have enough balance
          √ reverts (50ms)
        when the sender transfers all balance
          √ transfers the requested amount (75ms)
          √ emits a transfer event (43ms)
        when the sender transfers zero tokens
          √ transfers the requested amount (72ms)
          √ emits a transfer event (42ms)
      when the recipient is the zero address
        √ reverts (44ms)
      when the sender is the zero address
        √ reverts (45ms)
    _approve
      when the spender is not the zero address
        when the sender has enough balance
          √ emits an approval event (42ms)
          when there was no approved amount before
            √ approves the requested amount (60ms)
          when the spender had an approved amount
            √ approves the requested amount and replaces the previous one (56ms)
        when the sender does not have enough balance
          √ emits an approval event (38ms)
          when there was no approved amount before
            √ approves the requested amount (69ms)
          when the spender had an approved amount
            √ approves the requested amount and replaces the previous one (57ms)
      when the spender is the zero address
        √ reverts (61ms)
      when the owner is the zero address
        √ reverts (42ms)

  Contract: ERC20Detailed
    √ has a name
    √ has a symbol
    √ has an amount of decimals

  Contract: ERC20Pausable
    pauser role
      should behave like public role
        √ emits events during construction
        √ reverts when querying roles for the null account
        access control
          from authorized account
            √ allows access
          from unauthorized account
            √ reverts (57ms)
        add
          from a role-haver account
            √ adds role to a new account (84ms)
            √ emits a PauserAdded event (49ms)
            √ reverts when adding role to an already assigned account (87ms)
            √ reverts when adding role to the null account (52ms)
        remove
          from any account
            √ removes role from an already assigned account by same account (91ms)
            √ removes role from an already assigned account by other account (115ms)
            √ emits a PauserRemoved event (42ms)
            √ reverts when removing last assigned account (106ms)
            √ reverts when removing from an unassigned account (56ms)
            √ reverts when removing role from the null account (47ms)
    pause
      when the sender is the token pauser
        when the token is unpaused
          √ pauses the token (61ms)
          √ emits a Pause event (40ms)
        when the token is paused
          √ reverts (45ms)
      when the sender is not the token pauser
        √ reverts (66ms)
    unpause
      when the sender is the token pauser
        when the token is paused
          √ unpauses the token (58ms)
          √ emits an Unpause event
        when the token is unpaused
          √ reverts (48ms)
      when the sender is not the token pauser
        √ reverts (62ms)
    pausable token
      paused
        √ is not paused by default
        √ is paused after being paused (54ms)
        √ is not paused after being paused and then unpaused (99ms)
      transfer
        √ allows to transfer when unpaused (80ms)
        √ allows to transfer when paused and then unpaused (433ms)
        √ reverts when trying to transfer when paused (88ms)
      approve
        √ allows to approve when unpaused (61ms)
        √ allows to approve when paused and then unpaused (148ms)
        √ reverts when trying to approve when paused (96ms)
      transfer from
        √ allows to transfer from when unpaused (90ms)
        √ allows to transfer when paused and then unpaused (172ms)
        √ reverts when trying to transfer from when paused (105ms)
      decrease approval
        √ allows to decrease approval when unpaused (62ms)
        √ allows to decrease approval when paused and then unpaused (140ms)
        √ reverts when trying to transfer when paused (85ms)
      increase approval
        √ allows to increase approval when unpaused (62ms)
        √ allows to increase approval when paused and then unpaused (140ms)
        √ reverts when trying to increase approval when paused (90ms)

  Contract: Ownable
    as an ownable
      √ should have an owner
      √ changes owner after transfer (106ms)
      √ should prevent non-owners from transferring (47ms)
      √ should guard ownership against stuck state (51ms)

  Contract: ERC20UpgradeableToken
    setUpgradeAgent
      when the caller is not upgrade master
        √ reverts (105ms)
      when the caller is upgrade master
        when new agent address is the zero address
          √ reverts (80ms)
        when new agent address is the current contract address
          √ reverts (64ms)
        when new agent does not implement upgrade agent interface
          √ reverts (82ms)
        when new agent is not a contract
          √ reverts (93ms)
        when new agent implements upgrade agent interface
          when upgrade state is WaitingForAgent
            √ sets the upgradeAgent correctly (87ms)
            √ emits a LogUpgradeAgentSet event (63ms)
          when upgrade state is ReadyToUpgrade
            √ sets the upgradeAgent correctly (66ms)
            √ emits a LogUpgradeAgentSet event (44ms)
          when upgrade state is Upgrading
            √ reverts (244ms)
    setUpgradeMaster
      when the caller is not upgrade master
        √ reverts (99ms)
      when the caller is upgrade master
        when new upgrade master address is the zero address
          √ reverts (80ms)
        when new upgrade master address is the current contract address
          √ reverts (130ms)
        when new upgrade master address is not 0 and not contract address
          √ sets the upgrade master correctly (80ms)
    getUpgradeState
      √ returns WaitingForAgent when upgrade agent is not set (56ms)
      √ returns ReadyToUpgrade when upgrade agent is set but no tokens were upgraded yet (76ms)
      √ returns Upgrading when some upgrading happened but not all tokens were upgraded (176ms)
      √ returns UpgradeFinished when all tokens were upgraded (152ms)
    upgrade
      when upgrade agent is not set
        √ reverts (77ms)
      when upgrade agent is set and no upgrade was done yet
        when upgrade value is zero
          √ reverts (70ms)
        when upgrade value is higher than user balance
          √ reverts (81ms)
        when upgrade value is lower than user balance
          when token is not paused
            √ burns value from user balance and total supply (163ms)
            √ adds value to totalUpgraded (127ms)
            √ emits a LogUpgrade event (68ms)
            √ adds value to user balance in the upgraded token contract (112ms)
          when token is paused
            √ burns value from user balance and total supply (163ms)
            √ adds value to totalUpgraded (129ms)
            √ emits a LogUpgrade event (91ms)
            √ adds value to user balance in the upgraded token contract (124ms)
        when upgrade value is equal to the user balance
          when token is not paused
            √ burns value from user balance and total supply (209ms)
            √ adds value to totalUpgraded (135ms)
            √ emits a LogUpgrade event (78ms)
            √ adds value to user balance in the upgraded token contract (109ms)
          when token is paused
            √ burns value from user balance and total supply (206ms)
            √ adds value to totalUpgraded (158ms)
            √ emits a LogUpgrade event (104ms)
            √ adds value to user balance in the upgraded token contract (132ms)
      when upgrade agent is set and upgrades were done but not all total supply was upgraded yet
        when upgrade value is zero
          √ reverts (46ms)
        when upgrade value is higher than user balance
          √ reverts (55ms)
        when upgrade value is lower than user balance
          when token is not paused
            √ burns value from user balance and total supply (193ms)
            √ adds value to totalUpgraded (93ms)
            √ emits a LogUpgrade event (58ms)
            √ adds value to user balance in the upgraded token contract (113ms)
          when token is paused
            √ burns value from user balance and total supply (196ms)
            √ adds value to totalUpgraded (171ms)
            √ emits a LogUpgrade event (108ms)
            √ adds value to user balance in the upgraded token contract (134ms)
        when upgrade value is equal to the user balance
          when token is not paused
            √ burns value from user balance and total supply (184ms)
            √ adds value to totalUpgraded (100ms)
            √ emits a LogUpgrade event (58ms)
            √ adds value to user balance in the upgraded token contract (108ms)
          when token is paused
            √ burns value from user balance and total supply (185ms)
            √ adds value to totalUpgraded (154ms)
            √ emits a LogUpgrade event (82ms)
            √ adds value to user balance in the upgraded token contract (115ms)
      when upgrade agent is set and all total supply was upgraded
        √ reverts (218ms)
    upgradeFrom
      when received address is the zero address
        √ reverts (90ms)
      when received address is the contract address
        √ reverts (149ms)
      when received address is not the zero address and not the contract address
        when previous token is not set
          √ reverts (76ms)
        when previous token is set
          when caller is not the previous token
            √ reverts (62ms)
          when caller is the previous token
            when upgrade value is zero
              √ reverts (97ms)
            when upgrade value is positive
              √ increments totalSupply
              √ increments recipient balance
              √ emits Transfer event
    transferFrom of approved upgraded balance
      √ reverts (270ms)

  Contract: RecoveryFunctionality
    tokenFallback
      √ reverts
    recoverEther
      when caller is not token owner
        √ reverts (47ms)
      when caller is token owner
        when contract does not have ether balance
          √ reverts (46ms)
        when contract has ether balance
          √ transfers ether balance to the owner (239ms)
    recoverToken
      when caller is not token owner
        √ reverts (46ms)
      when caller is token owner
        when input token contract does not implement balanceOf
          √ reverts (139ms)
        when input token contract implements balanceOf with positive return value but does not implement transfer
          √ reverts (138ms)
        when contract does not have input token balance
          √ reverts (53ms)
        when contract has input token balance
          √ transfers token balance to the owner (189ms)
    reclaimContract
      when caller is not token owner
        √ reverts (63ms)
      when caller is token owner
        when input contract does not implement transferOwnership
          √ reverts (150ms)
        when contract is not owner of the input contract
          √ reverts (48ms)
        when contract is owner of the input contract
          √ transfers ownership of input contract to the token contract owner (199ms)


  214 passing (1m)